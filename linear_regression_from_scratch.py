# -*- coding: utf-8 -*-
"""Linear_Regression from scratch.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YoCA6tEjsWwtb7vf3Xz3MbSUTJn-s_tX
"""

import numpy as np

"""Linear Regression"""

class Linear_Regression:
  def __init__(self,learning_rate,no_of_iterations):
    self.learning_rate = learning_rate
    self.no_of_iterations = no_of_iterations

  def fit(self,x,y):
    self.x = x
    self.y = y
    self.m,self.n = x.shape
    self.w = np.zeros(self.n)
    self.b = 0

    for i in range(self.no_of_iterations):
      self.update_weights()

  def update_weights(self):
    y_prediction = self.predict(self.x)

    dw =  -(2 *(self.x.T).dot(self.y - y_prediction)) / self.m

    db = -2 * np.sum(self.y - y_prediction) / self.m

    self.w = self.w - self.learning_rate * dw
    self.b = self.b - self.learning_rate * db

  def predict(self,x):
    return x.dot(self.w) + self.b

"""Prediction"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt

data = pd.read_csv("/content/salary_data.csv")

data.head()

"""Train test split"""

x = data.iloc[:,:-1].values
y = data.iloc[:,1].values

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.33,random_state=4)

"""Training"""

model = Linear_Regression(learning_rate=0.02,no_of_iterations=1000)

model.fit(x_train,y_train)

x_train.shape

predict = model.predict(x_test)
predict

"""Plotting"""

plt.scatter(x_test,y_test,color='red')
plt.plot(x_test,predict,color='blue')
plt.xlabel("work experience")
plt.ylabel("Salary")
plt.show()